Imports System.Data.SqlClient
Imports ByteClassLibrary.MyFunctions
Imports ByteClassLibrary
Public Class Frm_Invoice


#Region "       Dim Things"

    Dim WithEvents BL As New ByteClassLibrary.ByteBarcodeListener2(Me, "cboItem")


    Dim WithEvents _BsAgent As New BindingSource
    Dim WithEvents _BsDistributor As New BindingSource
    Dim WithEvents _BsWareHouse As New BindingSource

    Dim WithEvents _DaInvoice As New SqlDataAdapter
    Dim WithEvents _DtInvoice As New DataTable
    Dim WithEvents _BsInvoice As New BindingSource




    Dim WithEvents _BsItem As New BindingSource


    Dim _InvoiceType As InvoiceTypes
    Dim _InvoiceID As Object
    Dim _InvoiceTypeID As Object
    Dim _IsPaid As Object
    Dim _InvoiceNumber As Object
    Dim _InvoiceRealNumber As Object
    Dim _OrgInvoiceNumber As Object
    Dim _OrgInvoiceID As Object
    Dim _InvDate As Object
    Dim _AgentID As Object
    Dim _DistributorID As Object
    Dim _CustomerName As Object
    Dim _TotalPrice As Object = 0
    Dim _FinalPrice As Object = 0
    Dim _Revenue As Object = 0
    Dim _Note As Object
    Dim _UserID As Object
    Dim _InvoiceInfo As Object
    Dim _AgentName As Object
    Dim _DistributorName As Object
    Dim _Username As Object
    Dim _FullName As Object
    Dim _WareHouseID As Object
    Dim _WareHouseName As Object

    Dim _PlusOrMinus As Object

    Dim _InvoiceNumberStrTitle As String

    Dim _TotalCost As Object = 0
    Dim _Discount As Object = 0
    Dim _RevPer As Object = 0

    Public Event InvoiceTypeChanged(val As Object)
    Public Event InvoiceIDChanged(val As Object)
    Public Event InvoiceTypeIDChanged(val As Object)
    Public Event IsPaidChanged(val As Object)
    Public Event InvoiceNumberChanged(val As Object)
    Public Event InvoiceRealNumberChanged(val As Object)
    Public Event OrgInvoiceNumberChanged(val As Object)
    Public Event OrgInvoiceIDChanged(val As Object)
    Public Event InvDateChanged(val As Object)
    Public Event AgentIDChanged(val As Object)
    Public Event DistributorIDChanged(val As Object)
    Public Event CustomerNameChanged(val As Object)
    Public Event TotalPriceChanged(val As Object)
    Public Event FinalPriceChanged(val As Object)
    Public Event RevenueChanged(val As Object)
    Public Event NoteChanged(val As Object)
    Public Event UserIDChanged(val As Object)
    Public Event InvoiceInfoChanged(val As Object)
    Public Event AgentNameChanged(val As Object)
    Public Event DistributorNameChanged(val As Object)
    Public Event UsernameChanged(val As Object)
    Public Event FullNameChanged(val As Object)
    Public Event WareHouseIDChanged(val As Object)
    Public Event WareHouseNameChanged(val As Object)
    Public Event PlusOrMinusChanged(val As Object)
    Public Event InvoiceNumberStrTitleChanged(val As Object)
    Public Event TotalCostChanged(val As Object)
    Public Event DiscountChanged(val As Object)
    Public Event RevPerChanged(val As Object)

    Enum InvoiceTypes
        Purchase = 1
        Purchase_R = 2
        Sell = 3
        Sell_R = 4
        Loss = 5
        StockBalance = 6
        InitialAmount = 7
        WareHouseTransfer = 8
        PreSale = 9
    End Enum

#End Region
#Region "       Properties"


    Public Property InvoiceType As InvoiceTypes
        Get
            Return _InvoiceType
        End Get
        Set(value As InvoiceTypes)
            _InvoiceType = value
            RaiseEvent InvoiceTypeChanged(value)
        End Set
    End Property
    Public Property InvoiceID As Object
        Get
            Return _InvoiceID
        End Get
        Set(value As Object)
            _InvoiceID = value
            RaiseEvent InvoiceIDChanged(value)
        End Set
    End Property
    Public Property InvoiceTypeID As Object
        Get
            Return _InvoiceTypeID
        End Get
        Set(value As Object)
            _InvoiceTypeID = value
            RaiseEvent InvoiceTypeIDChanged(value)
        End Set
    End Property
    Public Property IsPaid As Object
        Get
            Return _IsPaid
        End Get
        Set(value As Object)
            _IsPaid = value
            RaiseEvent IsPaidChanged(value)
        End Set
    End Property
    Public Property InvoiceNumber As Object
        Get
            Return _InvoiceNumber
        End Get
        Set(value As Object)
            _InvoiceNumber = value
            RaiseEvent InvoiceNumberChanged(value)
        End Set
    End Property
    Public Property InvoiceRealNumber As Object
        Get
            Return _InvoiceRealNumber
        End Get
        Set(value As Object)
            _InvoiceRealNumber = value
            RaiseEvent InvoiceRealNumberChanged(value)
        End Set
    End Property
    Public Property OrgInvoiceNumber As Object
        Get
            Return _OrgInvoiceNumber
        End Get
        Set(value As Object)
            _OrgInvoiceNumber = value
            RaiseEvent OrgInvoiceNumberChanged(value)
        End Set
    End Property
    Public Property OrgInvoiceID As Object
        Get
            Return _OrgInvoiceID
        End Get
        Set(value As Object)
            _OrgInvoiceID = value
            RaiseEvent OrgInvoiceIDChanged(value)
        End Set
    End Property
    Public Property InvDate As Object
        Get
            Return _InvDate
        End Get
        Set(value As Object)
            _InvDate = value
            RaiseEvent InvDateChanged(value)
        End Set
    End Property
    Public Property AgentID As Object
        Get
            Return _AgentID
        End Get
        Set(value As Object)
            _AgentID = value
            If Not IsNothing(_BsAgent.Current) AndAlso Not IsDBNull(_BsAgent.Current("AgentID")) Then
                AgentName = _BsAgent.Current("AgentName")
            End If
            RaiseEvent AgentIDChanged(value)
        End Set
    End Property
    Public Property DistributorID As Object
        Get
            Return _DistributorID
        End Get
        Set(value As Object)
            _DistributorID = value
            If Not IsNothing(_BsDistributor.Current) AndAlso Not IsDBNull(_BsDistributor.Current("DistributorID")) Then
                DistributorName = _BsDistributor.Current("DistributorName")
            End If
            RaiseEvent DistributorIDChanged(value)
        End Set
    End Property
    Public Property CustomerName As Object
        Get
            Return _CustomerName
        End Get
        Set(value As Object)
            _CustomerName = value
            RaiseEvent CustomerNameChanged(value)
        End Set
    End Property
    Public Property TotalPrice As Object
        Get
            Return _TotalPrice
        End Get
        Set(value As Object)
            _TotalPrice = value
            RaiseEvent TotalPriceChanged(value)
        End Set
    End Property
    Public Property FinalPrice As Object
        Get
            Return _FinalPrice
        End Get
        Set(value As Object)
            _FinalPrice = value
            RaiseEvent FinalPriceChanged(value)
        End Set
    End Property
    Public Property Revenue As Object
        Get
            Return _Revenue
        End Get
        Set(value As Object)
            _Revenue = value
            RaiseEvent RevenueChanged(value)
        End Set
    End Property
    Public Property Note As Object
        Get
            Return _Note
        End Get
        Set(value As Object)
            _Note = value
            RaiseEvent NoteChanged(value)
        End Set
    End Property
    Public Property UserID As Object
        Get
            Return _UserID
        End Get
        Set(value As Object)
            _UserID = value
            RaiseEvent UserIDChanged(value)
        End Set
    End Property
    Public Property WareHouseID As Object
        Get
            Return _WareHouseID
        End Get
        Set(value As Object)
            _WareHouseID = value
            If Not IsNothing(_BsWareHouse.Current) AndAlso Not IsDBNull(_BsWareHouse.Current("WareHouseName")) Then
                WareHouseName = _BsWareHouse.Current("WareHouseName")
            End If
            RaiseEvent WareHouseIDChanged(value)
        End Set
    End Property

    Public Property InvoiceInfo As Object
        Get
            Return _InvoiceInfo
        End Get
        Set(value As Object)
            _InvoiceInfo = value
            RaiseEvent InvoiceInfoChanged(value)
        End Set
    End Property
    Public Property AgentName As Object
        Get
            Return _AgentName
        End Get
        Set(value As Object)
            _AgentName = value
            RaiseEvent AgentNameChanged(value)
        End Set
    End Property
    Public Property DistributorName As Object
        Get
            Return _DistributorName
        End Get
        Set(value As Object)
            _DistributorName = value
            RaiseEvent DistributorNameChanged(value)
        End Set
    End Property
    Public Property Username As Object
        Get
            Return _Username
        End Get
        Set(value As Object)
            _Username = value
            RaiseEvent UsernameChanged(value)
        End Set
    End Property
    Public Property FullName As Object
        Get
            Return _FullName
        End Get
        Set(value As Object)
            _FullName = value
            RaiseEvent FullNameChanged(value)
        End Set
    End Property
    Public Property WareHouseName As Object
        Get
            Return _WareHouseName
        End Get
        Set(value As Object)
            _WareHouseName = value
            RaiseEvent WareHouseNameChanged(value)
        End Set
    End Property



    Public Property PlusOrMinus As Object
        Get
            Return _PlusOrMinus
        End Get
        Set(value As Object)
            _PlusOrMinus = value
            RaiseEvent PlusOrMinusChanged(value)
        End Set
    End Property
    Public Property TotalCost As Object
        Get
            Return _TotalCost
        End Get
        Set(value As Object)
            _TotalCost = value
            RaiseEvent TotalCostChanged(value)
        End Set
    End Property
    Public Property Discount As Object
        Get
            Return _Discount
        End Get
        Set(value As Object)
            _Discount = value
            RaiseEvent DiscountChanged(value)
        End Set
    End Property
    Public Property RevPer As Object
        Get
            Return _RevPer
        End Get
        Set(value As Object)
            _RevPer = value
            RaiseEvent RevPerChanged(value)
        End Set
    End Property





#End Region


    Public Sub New(ByVal myInvoiceID As Int64)

        ' This call is required by the designer.
        InitializeComponent()

        InvoiceID = myInvoiceID

        ' Add any initialization after the InitializeComponent() call.

    End Sub
    Public Sub New(ByVal myInvoiceType As InvoiceTypes)

        ' This call is required by the designer.
        InitializeComponent()

        InvoiceID = 0
        InvoiceType = myInvoiceType

        ' Add any initialization after the InitializeComponent() call.

    End Sub



    Private Sub Frm_Invoice_Load(sender As System.Object, e As System.EventArgs) Handles MyBase.Load
        Try
            FontMyControl(Me)
            IniDgvInfo()
            IniDgvTotal()
            IniItemType()
            Get_sp_hlp_Item()
            Get_sp_hlp_Agent()
            Get_sp_hlp_Distibutor()
            Get_sp_hlp_WareHouse()


            Ini_Invoice_Det_DataAdapter()
            GetInvoice()






        Catch ex As Exception
            HandleMyError(ex)
        End Try
    End Sub

#Region "       dgvInfo"

    Dim WithEvents cboWareHouse As New ByteClassLibrary.MyGridTextBox3
    Dim WithEvents cboDistributor As New ByteClassLibrary.MyGridTextBox3
    Dim WithEvents cboAgent As New ByteClassLibrary.MyGridTextBox3

    Dim WithEvents numInvoiceNumber As New ByteClassLibrary.MyNumericBox
    Dim WithEvents numInvoiceRealNumber As New ByteClassLibrary.MyNumericBox
    Dim WithEvents numOrgInvoiceNumer As New ByteClassLibrary.MyNumericBox

    Dim WithEvents dtpInvoiceDate As New ByteClassLibrary.MyDateTimePicker

    Dim WithEvents txtCustomerName As New ByteClassLibrary.MyTextBox
    Dim WithEvents txtNote As New ByteClassLibrary.MyTextBox

#Region "       Agent"


    Private Sub Get_sp_hlp_Agent()

        Dim da As New SqlDataAdapter("sp_hlp_Agent", PubCn)
        Dim dt As New DataTable




        da.SelectCommand.CommandType = CommandType.StoredProcedure

        dt.Clear()
        da.Fill(dt)


        _BsAgent.DataSource = dt
        _BsAgent.Filter = "AgentID is not null"
        _BsAgent.Sort = "AgentName asc"

        With cboAgent


            .MySource = _BsAgent
            .SetColumn(ByteClassLibrary.MyGridTextBox3.ColType.ValueMember, "AgentID", False, "ر.م")
            .SetColumn(ByteClassLibrary.MyGridTextBox3.ColType.DisplayMember, "AgentName", True, "الاسم")

            .MyBeginProcess()




        End With



    End Sub
    Private Sub _BsAgent_CurrentChanged() Handles _BsAgent.CurrentChanged
        If _BsAgent.Current("AgentID") = 1 Then
            'PName.Visible = True
            'cboIsPaid.SelectedValue = True
            'cboIsPaid.Enabled = False
        Else
            'PName.Visible = False
            'cboIsPaid.Enabled = True
        End If
    End Sub



#End Region
#Region "       Distibutor"



    Private Sub Get_sp_hlp_Distibutor()

        Dim da As New SqlDataAdapter("sp_hlp_Distributor", PubCn)
        Dim dt As New DataTable
        Dim bs As New BindingSource



        da.SelectCommand.CommandType = CommandType.StoredProcedure

        dt.Clear()
        da.Fill(dt)


        _BsDistributor.DataSource = dt
        _BsDistributor.Filter = "DistributorID is not null"
        _BsDistributor.Sort = "DistributorName asc"




        With cboDistributor
            .MySource = _BsDistributor
            .SetColumn(ByteClassLibrary.MyGridTextBox3.ColType.ValueMember, "DistributorID", False, "ر.م")
            .SetColumn(ByteClassLibrary.MyGridTextBox3.ColType.DisplayMember, "DistributorName", True, "الاسم")

            .MyBeginProcess()
        End With





    End Sub




#End Region
#Region "       WareHouse"


    Private Sub Get_sp_hlp_WareHouse()

        Dim da As New SqlDataAdapter("sp_hlp_WareHouse", PubCn)
        Dim dt As New DataTable




        da.SelectCommand.CommandType = CommandType.StoredProcedure

        dt.Clear()
        da.Fill(dt)
        dt.Rows.RemoveAt(0)

        _BsWareHouse.DataSource = dt





        With cboWareHouse
            .MySource = _BsWareHouse
            .SetColumn(ByteClassLibrary.MyGridTextBox3.ColType.ValueMember, "WareHouseID", False, "ر.م")
            .SetColumn(ByteClassLibrary.MyGridTextBox3.ColType.DisplayMember, "WareHouseName", True, "الاسم")

            .MyBeginProcess()
        End With


    End Sub
    Private Sub _BsWareHouse_CurrentChanged() Handles _BsWareHouse.CurrentChanged

        'For Each R As DataGridViewRow In dgv.Rows
        '    R.Cells("WareHouseID").Value = _BsWareHouse.Current("WareHouseID")
        '    R.Cells("WareHouseName").Value = _BsWareHouse.Current("WareHouseName")
        'Next

        '_bsInvoiceDet_CurrentChanged()



    End Sub



#End Region


    Private Sub IniDgvInfo()
        dgvInfo.Rows.Add({"رقم الفاتورة", ""})
        dgvInfo.Rows.Add({"رقم المصدر", ""})
        dgvInfo.Rows.Add({"الفاتورة الاصلية", ""})
        dgvInfo.Rows.Add({"التاريخ", ""})
        dgvInfo.Rows.Add({"العميل", ""})
        dgvInfo.Rows.Add({"الاسم", ""})
        dgvInfo.Rows.Add({"المسوق", ""})
        dgvInfo.Rows.Add({"المخزن", ""})
        dgvInfo.Rows.Add({"ملاحظة", ""})

        dgvInfo.Columns(0).ReadOnly = True
        dgvInfo.Columns(1).ReadOnly = True




        dgvInfo(0, 4).Style.Font = New Font(Me.Font.FontFamily.Name, 12, FontStyle.Underline)
        dgvInfo(0, 4).Style.ForeColor = Color.Blue

        dgvInfo(0, 6).Style.Font = New Font(Me.Font.FontFamily.Name, 12, FontStyle.Underline)
        dgvInfo(0, 6).Style.ForeColor = Color.Blue

        dgvInfo(0, 7).Style.Font = New Font(Me.Font.FontFamily.Name, 12, FontStyle.Underline)
        dgvInfo(0, 7).Style.ForeColor = Color.Blue



        dgvInfo.CurrentCell = Nothing
        dgvInfo.BorderStyle = BorderStyle.None

        cboAgent.Visible = False
        cboDistributor.Visible = False
        cboWareHouse.Visible = False
        numInvoiceNumber.Visible = False
        numInvoiceRealNumber.Visible = False
        numOrgInvoiceNumer.Visible = False
        dtpInvoiceDate.Visible = False
        txtCustomerName.Visible = False
        txtNote.Visible = False




        dgvInfo.Controls.Add(cboAgent)
        dgvInfo.Controls.Add(cboDistributor)
        dgvInfo.Controls.Add(cboWareHouse)
        dgvInfo.Controls.Add(numInvoiceNumber)
        dgvInfo.Controls.Add(numInvoiceRealNumber)
        dgvInfo.Controls.Add(numOrgInvoiceNumer)
        dgvInfo.Controls.Add(dtpInvoiceDate)
        dgvInfo.Controls.Add(txtCustomerName)
        dgvInfo.Controls.Add(txtNote)





    End Sub
    Private Sub dgvInfo_CellEnter(sender As Object, e As System.Windows.Forms.DataGridViewCellEventArgs) Handles dgvInfo.CellEnter
        Try
            If dgvInfo.Columns(e.ColumnIndex).Name = "Disc" Then

                Select Case dgvInfo(0, e.RowIndex).Value

                    Case "رقم المصدر"

                        Dim rect As Rectangle = dgvInfo.GetCellDisplayRectangle(e.ColumnIndex, e.RowIndex, True)
                        numInvoiceRealNumber.Multiline = True
                        numInvoiceRealNumber.BorderStyle = BorderStyle.Fixed3D
                        numInvoiceRealNumber.Size = rect.Size
                        numInvoiceRealNumber.Location = rect.Location
                        numInvoiceRealNumber.Visible = True
                        numInvoiceRealNumber.Focus()


                    Case "التاريخ"

                        Dim rect As Rectangle = dgvInfo.GetCellDisplayRectangle(e.ColumnIndex, e.RowIndex, True)
                        dtpInvoiceDate.Size = rect.Size
                        dtpInvoiceDate.Format = DateTimePickerFormat.Custom
                        dtpInvoiceDate.CustomFormat = "yyyy-MM-dd  HH:mm"
                        dtpInvoiceDate.Location = rect.Location
                        dtpInvoiceDate.Visible = True
                        dtpInvoiceDate.Focus()



                    Case "العميل"

                        Dim rect As Rectangle = dgvInfo.GetCellDisplayRectangle(e.ColumnIndex, e.RowIndex, True)
                        cboAgent.Multiline = False
                        cboAgent.BorderStyle = BorderStyle.Fixed3D
                        cboAgent.Size = rect.Size
                        cboAgent.Location = rect.Location
                        cboAgent.Visible = True
                        cboAgent.Focus()


                    Case "الاسم"

                        Dim rect As Rectangle = dgvInfo.GetCellDisplayRectangle(e.ColumnIndex, e.RowIndex, True)
                        txtCustomerName.Multiline = True
                        txtCustomerName.BorderStyle = BorderStyle.Fixed3D
                        txtCustomerName.Size = rect.Size
                        txtCustomerName.Location = rect.Location
                        txtCustomerName.Visible = True
                        txtCustomerName.Focus()



                    Case "المسوق"

                        Dim rect As Rectangle = dgvInfo.GetCellDisplayRectangle(e.ColumnIndex, e.RowIndex, True)
                        cboDistributor.Multiline = False
                        cboDistributor.BorderStyle = BorderStyle.Fixed3D
                        cboDistributor.Size = rect.Size
                        cboDistributor.Location = rect.Location
                        cboDistributor.Visible = True
                        cboDistributor.Focus()



                    Case "المخزن"

                        Dim rect As Rectangle = dgvInfo.GetCellDisplayRectangle(e.ColumnIndex, e.RowIndex, True)
                        cboWareHouse.Multiline = False
                        cboWareHouse.BorderStyle = BorderStyle.Fixed3D
                        cboWareHouse.Size = rect.Size
                        cboWareHouse.Location = rect.Location
                        cboWareHouse.Visible = True
                        cboWareHouse.Focus()




                    Case "ملاحظة"

                        Dim rect As Rectangle = dgvInfo.GetCellDisplayRectangle(e.ColumnIndex, e.RowIndex, True)
                        txtNote.Multiline = True
                        txtNote.BorderStyle = BorderStyle.Fixed3D
                        txtNote.Size = rect.Size
                        txtNote.Location = rect.Location
                        txtNote.Visible = True
                        txtNote.Focus()



                End Select




            End If

        Catch ex As Exception
            HandleMyError(ex)
        End Try



    End Sub
    Private Sub dgvInfo_CellLeave(sender As Object, e As System.Windows.Forms.DataGridViewCellEventArgs) Handles dgvInfo.CellLeave
        Try
            If dgvInfo.Columns(e.ColumnIndex).Name = "Disc" Then

                Select Case dgvInfo(0, e.RowIndex).Value

                    Case "رقم المصدر"
                        numInvoiceRealNumber.Visible = False
                    Case "التاريخ"
                        dtpInvoiceDate.Visible = False
                    Case "العميل"
                        cboAgent.Visible = False
                    Case "الاسم"
                        txtCustomerName.Visible = False
                    Case "المسوق"
                        cboDistributor.Visible = False
                    Case "المخزن"
                        cboWareHouse.Visible = False
                    Case "ملاحظة"
                        txtNote.Visible = False
                End Select













            End If

        Catch ex As Exception
            HandleMyError(ex)
        End Try
    End Sub
    Private Sub dgvInfo_CellMouseEnter(sender As Object, e As System.Windows.Forms.DataGridViewCellEventArgs) Handles dgvInfo.CellMouseEnter
        Try
            If e.ColumnIndex = 0 AndAlso (e.RowIndex = 4 Or e.RowIndex = 6 Or e.RowIndex = 7) Then
                dgvInfo.Cursor = Cursors.Hand
            Else
                dgvInfo.Cursor = Cursors.Arrow
            End If
        Catch ex As Exception
            HandleMyError(ex)
        End Try
    End Sub


    'Private Sub cboWareHouse_MySelectedValueChanged(sender, e) Handles cboWareHouse.MySelectedValueChanged
    '    Try
    '        WareHouseID = cboWareHouse.MySelectedValue
    '    Catch ex As Exception
    '        HandleMyError(ex)
    '    End Try
    'End Sub
    'Private Sub cboDistributor_MySelectedValueChanged(sender, e) Handles cboDistributor.MySelectedValueChanged
    '    Try
    '        DistributorID = cboDistributor.MySelectedValue
    '    Catch ex As Exception
    '        HandleMyError(ex)
    '    End Try
    'End Sub
    'Private Sub cboAgent_MySelectedValueChanged(sender, e) Handles cboAgent.MySelectedValueChanged
    '    Try
    '        AgentID = cboAgent.MySelectedValue
    '    Catch ex As Exception
    '        HandleMyError(ex)
    '    End Try
    'End Sub
    Private Sub numInvoiceNumber_TextChanged(sender As Object, e As System.EventArgs) Handles numInvoiceNumber.TextChanged
        Try
            InvoiceNumber = numInvoiceNumber.Text
        Catch ex As Exception
            HandleMyError(ex)
        End Try
    End Sub
    Private Sub numInvoiceRealNumber_TextChanged(sender As Object, e As System.EventArgs) Handles numInvoiceRealNumber.TextChanged
        Try
            InvoiceRealNumber = numInvoiceRealNumber.Text
        Catch ex As Exception
            HandleMyError(ex)
        End Try
    End Sub
    Private Sub numOrgInvoiceNumer_TextChanged(sender As Object, e As System.EventArgs) Handles numOrgInvoiceNumer.TextChanged
        Try
            OrgInvoiceNumber = numOrgInvoiceNumer.Text
        Catch ex As Exception
            HandleMyError(ex)
        End Try
    End Sub
    Private Sub dtpInvoiceDate_ValueChanged(sender As Object, e As System.EventArgs) Handles dtpInvoiceDate.ValueChanged
        Try
            InvDate = dtpInvoiceDate.Value
        Catch ex As Exception
            HandleMyError(ex)
        End Try
    End Sub
    Private Sub txtCustomerName_TextChanged(sender As Object, e As System.EventArgs) Handles txtCustomerName.TextChanged
        Try
            CustomerName = txtCustomerName.Text
        Catch ex As Exception
            HandleMyError(ex)
        End Try
    End Sub
    Private Sub txtNote_TextChanged(sender As Object, e As System.EventArgs) Handles txtNote.TextChanged
        Try
            Note = txtNote.Text
        Catch ex As Exception
            HandleMyError(ex)
        End Try
    End Sub


    Private Sub Me_WareHouseIDChanged(ByVal v As Object) Handles Me.WareHouseIDChanged
        Try
            dgvInfo.Rows(7).Cells(1).Value = WareHouseName.ToString
        Catch ex As Exception
            HandleMyError(ex)
        End Try
    End Sub
    Private Sub Me_AgentIDChanged(ByVal v As Object) Handles Me.AgentIDChanged
        Try
            dgvInfo.Rows(4).Cells(1).Value = AgentName.ToString
        Catch ex As Exception
            HandleMyError(ex)
        End Try
    End Sub
    Private Sub Me_DistributorIDChanged(ByVal v As Object) Handles Me.DistributorIDChanged
        Try
            dgvInfo.Rows(6).Cells(1).Value = DistributorName.ToString
        Catch ex As Exception
            HandleMyError(ex)
        End Try
    End Sub


    Private Sub Me_CustomerNameChanged() Handles Me.CustomerNameChanged
        Try
            dgvInfo.Rows(5).Cells(1).Value = Me.CustomerName.ToString
        Catch ex As Exception
            HandleMyError(ex)
        End Try
    End Sub
    Private Sub Me_NoteChanged() Handles Me.NoteChanged
        Try
            dgvInfo.Rows(8).Cells(1).Value = Note.ToString
        Catch ex As Exception
            HandleMyError(ex)
        End Try
    End Sub
    Private Sub Me_InvoiceNumberChanged() Handles Me.InvoiceNumberChanged
        Try
            dgvInfo.Rows(0).Cells(1).Value = InvoiceNumber.ToString
        Catch ex As Exception
            HandleMyError(ex)
        End Try
    End Sub
    Private Sub Me_InvoiceRealNumberChanged() Handles Me.InvoiceRealNumberChanged
        Try
            dgvInfo.Rows(1).Cells(1).Value = InvoiceRealNumber.ToString
        Catch ex As Exception
            HandleMyError(ex)
        End Try
    End Sub
    Private Sub Me_OrgInvoiceNumberChanged() Handles Me.OrgInvoiceNumberChanged
        Try
            dgvInfo.Rows(2).Cells(1).Value = OrgInvoiceNumber.ToString
        Catch ex As Exception
            HandleMyError(ex)
        End Try
    End Sub







#End Region
#Region "       Items"
    Private Sub IniItemType()

        Dim dt As New DataTable
        dt.Columns.Add("ID", GetType(Integer))
        dt.Columns.Add("Name", GetType(String))

        dt.Rows.Add(DBNull.Value, "كل الاصناف")
        dt.Rows.Add(1, "أصنافي")
        dt.Rows.Add(2, "الاصناف الموجودة")





        With cboItemType
            .DataSource = dt
            .ValueMember = "ID"
            .DisplayMember = "Name"
        End With






    End Sub
    Private Sub Get_sp_hlp_Item()

        Dim da As New SqlDataAdapter("sp_hlp_Item", PubCn)
        Dim dt As New DataTable

        With da.SelectCommand.Parameters
            .Clear()
            .AddWithValue("@Source", cboItemType.SelectedValue)
            .AddWithValue("@InvoiceID", OrgInvoiceID)
        End With


        da.SelectCommand.CommandType = CommandType.StoredProcedure

        dt.Clear()
        da.Fill(dt)


        _BsItem.DataSource = dt


        With cboItem

            .MySource = _BsItem
            .SetColumn(ByteClassLibrary.MyGridTextBox3.ColType.ValueMember, "GID", True, "رم")
            .SetColumn(ByteClassLibrary.MyGridTextBox3.ColType.DisplayMember, "ProductName", True, "الصنف")
            .SetColumn("Barcode", True, False, "باركود", , 120)
            .SetColumn("ExDate", True, False, "الصلاحية", "yyyy-MM-dd", 110)
            .SetColumn("AmountLeft", True, False, "الكمية", "#,##0.###")
            .SetColumn("LastUnitCost", True, False, "اخر تكلفة", "#,##0.###")
            .SetColumn("AvgUnitCost", True, False, "متوسvط التكلفة", "#,##0.###")
            .SetColumn("SellPrice", True, False, "بيع", "#,##0.###")
            .SetColumn("Rack", True, False, "الرف", , 100)
            .SetColumn("ProductDetails", True, False, "تفاصيل")


            .MyIsColumnHeaderVisible = True
            .MyCellBorderStyle = DataGridViewCellBorderStyle.Single



            .MyBeginProcess()


        End With



    End Sub
    Private Sub cboItemType_SelectedValueChanged(sender As Object, e As System.EventArgs) Handles cboItemType.SelectedValueChanged
        Try
            If cboItemType.SelectedValue.ToString <> "System.Data.DataRowView" Then
                If Not IsNothing(cboItemType.SelectedValue) Then
                    Get_sp_hlp_Item()
                End If
            End If


        Catch ex As Exception
            HandleMyError(ex)
        End Try
    End Sub
    






#End Region
#Region "       dgvTotal"

    Private Sub IniDgvTotal()
        dgvTotal.Rows.Add({"الاجمالي", ""})
        dgvTotal.Rows.Add({"خصم", ""})
        dgvTotal.Rows.Add({"النهائي", ""})
        dgvTotal.Rows.Add({"+", ""})
        dgvTotal.Rows.Add({"+%", ""})


        dgvTotal.CurrentCell = Nothing
        dgvTotal.BorderStyle = BorderStyle.None
        dgvTotal.Font = New Font(Me.Font.FontFamily.Name, 14)

        dgvTotal.Columns(0).ReadOnly = True

        For Each R As DataGridViewRow In dgvTotal.Rows
            R.ReadOnly = True
        Next

        dgvTotal.Rows(1).ReadOnly = False
        dgvTotal.Rows(2).ReadOnly = False




    End Sub


#End Region
#Region "       Invoice"


    Private Sub Ini_Invoice_Det_DataAdapter()

        _DaInvoice.SelectCommand = New SqlCommand


        With _DaInvoice.SelectCommand

            .CommandText = "sp_rpt_Invoice"
            .Connection = PubCn
            .CommandType = CommandType.StoredProcedure

            With .Parameters
                .Clear()
                .AddWithValue("@InvoiceID", InvoiceID)
                .Add("@InvoiceTypeID", SqlDbType.Int, 0)
                .Add("@IsPaid", SqlDbType.Bit, 0)
                .Add("@InvoiceNumber", SqlDbType.BigInt, 0)
                .Add("@InvoiceRealNumber", SqlDbType.NVarChar, 200)
                .Add("@OrgInvoiceID", SqlDbType.BigInt, 0)
                .Add("@OrgInvoiceNumber", SqlDbType.BigInt, 0)
                .Add("@InvDate", SqlDbType.DateTime, 0)
                .Add("@AgentID", SqlDbType.BigInt, 0)
                .Add("@DistributorID", SqlDbType.BigInt, 0)
                .Add("@CustomerName", SqlDbType.NVarChar, 200)
                .Add("@TotalPrice", SqlDbType.Decimal, 0)
                .Add("@FinalPrice", SqlDbType.Decimal, 0)
                .Add("@Revenue", SqlDbType.Decimal, 0)
                .Add("@Note", SqlDbType.NVarChar, 200)
                .Add("@UserID", SqlDbType.BigInt, 0)
                .Add("@InvoiceInfo", SqlDbType.NVarChar, 200)
                .Add("@AgentName", SqlDbType.NVarChar, 200)
                .Add("@DistributorName", SqlDbType.NVarChar, 200)
                .Add("@Username", SqlDbType.NVarChar, 50)
                .Add("@FullName", SqlDbType.NVarChar, 200)
                .Add("@WareHouseID", SqlDbType.BigInt, 0)
                .Add("@WareHouseName", SqlDbType.NVarChar, 200)

            End With


            .Parameters("@InvoiceTypeID").Direction = ParameterDirection.Output
            .Parameters("@IsPaid").Direction = ParameterDirection.Output
            .Parameters("@InvoiceNumber").Direction = ParameterDirection.Output
            .Parameters("@InvoiceRealNumber").Direction = ParameterDirection.Output
            .Parameters("@OrgInvoiceID").Direction = ParameterDirection.Output
            .Parameters("@OrgInvoiceNumber").Direction = ParameterDirection.Output
            .Parameters("@InvDate").Direction = ParameterDirection.Output
            .Parameters("@AgentID").Direction = ParameterDirection.Output
            .Parameters("@DistributorID").Direction = ParameterDirection.Output
            .Parameters("@CustomerName").Direction = ParameterDirection.Output
            .Parameters("@TotalPrice").Direction = ParameterDirection.Output
            .Parameters("@FinalPrice").Direction = ParameterDirection.Output
            .Parameters("@Revenue").Direction = ParameterDirection.Output
            .Parameters("@Note").Direction = ParameterDirection.Output
            .Parameters("@UserID").Direction = ParameterDirection.Output
            .Parameters("@InvoiceInfo").Direction = ParameterDirection.Output
            .Parameters("@AgentName").Direction = ParameterDirection.Output
            .Parameters("@DistributorName").Direction = ParameterDirection.Output
            .Parameters("@Username").Direction = ParameterDirection.Output
            .Parameters("@FullName").Direction = ParameterDirection.Output
            .Parameters("@WareHouseID").Direction = ParameterDirection.Output
            .Parameters("@WareHouseName").Direction = ParameterDirection.Output


            .Parameters("@InvoiceTypeID").Scale = 0
            .Parameters("@IsPaid").Scale = 0
            .Parameters("@InvoiceNumber").Scale = 0
            .Parameters("@InvoiceRealNumber").Scale = 0
            .Parameters("@OrgInvoiceID").Scale = 0
            .Parameters("@OrgInvoiceNumber").Scale = 0
            .Parameters("@InvDate").Scale = 0
            .Parameters("@AgentID").Scale = 0
            .Parameters("@DistributorID").Scale = 0
            .Parameters("@CustomerName").Scale = 0
            .Parameters("@TotalPrice").Scale = 3
            .Parameters("@FinalPrice").Scale = 3
            .Parameters("@Revenue").Scale = 3
            .Parameters("@Note").Scale = 0
            .Parameters("@UserID").Scale = 0
            .Parameters("@InvoiceInfo").Scale = 0
            .Parameters("@AgentName").Scale = 0
            .Parameters("@DistributorName").Scale = 0
            .Parameters("@Username").Scale = 0
            .Parameters("@FullName").Scale = 0
            .Parameters("@WareHouseID").Scale = 0
            .Parameters("@WareHouseName").Scale = 0


        End With






        _DaInvoice.InsertCommand = New SqlCommand


        With _DaInvoice.InsertCommand


            .CommandText = "sp_tbl_Invoice_Det_Insert"
            .Connection = PubCn
            .CommandType = CommandType.StoredProcedure



            With .Parameters

                .Clear()
                .AddWithValue("@InvoiceID", InvoiceID)
                .Add("@IsProduct", SqlDbType.Bit, 0, "IsProduct")
                .Add("@Sort", SqlDbType.Int, 0, "Sort")
                .Add("@WareHouseID", SqlDbType.BigInt, 0, "WareHouseID")
                .Add("@PlusOrMinus", SqlDbType.Int, 0, "PlusOrMinus")
                .Add("@StockID", SqlDbType.BigInt, 0, "StockID")
                .Add("@Amount", SqlDbType.Decimal, 0, "Amount")
                .Add("@UnitPrice", SqlDbType.Decimal, 0, "UnitPrice")
                .Add("@AvgCost", SqlDbType.Decimal, 0, "AvgCost")
                .Add("@Total", SqlDbType.Decimal, 0, "Total")
            End With

        End With



        _DaInvoice.UpdateCommand = New SqlCommand


        With _DaInvoice.UpdateCommand


            .CommandText = "sp_tbl_Invoice_Det_Update"
            .Connection = PubCn
            .CommandType = CommandType.StoredProcedure

            .CommandTimeout = 0


            With .Parameters

                .Clear()
                .Add("@InvDetID", SqlDbType.BigInt, 0, "InvDetID")
                .Add("@IsProduct", SqlDbType.Bit, 0, "IsProduct")
                .Add("@Sort", SqlDbType.Int, 0, "Sort")
                .Add("@WareHouseID", SqlDbType.BigInt, 0, "WareHouseID")
                .Add("@Amount", SqlDbType.Decimal, 0, "Amount")
                .Add("@UnitPrice", SqlDbType.Decimal, 0, "UnitPrice")
                .Add("@AvgCost", SqlDbType.Decimal, 0, "AvgCost")
                .Add("@Total", SqlDbType.Decimal, 0, "Total")
            End With

        End With


        _DaInvoice.DeleteCommand = New SqlCommand


        With _DaInvoice.DeleteCommand


            .CommandText = "sp_tbl_Invoice_Det_Delete"
            .Connection = PubCn
            .CommandType = CommandType.StoredProcedure

            .CommandTimeout = 0


            With .Parameters
                .Clear()
                .Add("@InvDetID", SqlDbType.BigInt, 0, "InvDetID")
                .Add("@IsProduct", SqlDbType.Bit, 0, "IsProduct")
            End With

        End With


    End Sub
    Private Sub GetInvoice()

        '_DtInvoice = frm_sp_rpt_Invoice.fn_sp_rpt_Invoice(InvoiceID, InvoiceTypeID, IsPaid, InvoiceNumber, InvoiceRealNumber, OrgInvoiceID, OrgInvoiceNumber, InvDate, AgentID, DistributorID, CustomerName, TotalPrice, FinalPrice, Revenue, Note, UserID, InvoiceInfo, AgentName, DistributorName, Username, FullName, WareHouseID, WareHouseName)

        _DaInvoice.Fill(_DtInvoice)
        With _DaInvoice.SelectCommand
            InvoiceTypeID = .Parameters("@InvoiceTypeID").Value
            IsPaid = .Parameters("@IsPaid").Value
            InvoiceNumber = .Parameters("@InvoiceNumber").Value
            InvoiceRealNumber = .Parameters("@InvoiceRealNumber").Value
            OrgInvoiceID = .Parameters("@OrgInvoiceID").Value
            OrgInvoiceNumber = .Parameters("@OrgInvoiceNumber").Value
            InvDate = .Parameters("@InvDate").Value
            AgentID = .Parameters("@AgentID").Value
            DistributorID = .Parameters("@DistributorID").Value
            CustomerName = .Parameters("@CustomerName").Value
            TotalPrice = .Parameters("@TotalPrice").Value
            FinalPrice = .Parameters("@FinalPrice").Value
            Revenue = .Parameters("@Revenue").Value
            Note = .Parameters("@Note").Value
            UserID = .Parameters("@UserID").Value
            InvoiceInfo = .Parameters("@InvoiceInfo").Value
            AgentName = .Parameters("@AgentName").Value
            DistributorName = .Parameters("@DistributorName").Value
            Username = .Parameters("@Username").Value
            FullName = .Parameters("@FullName").Value
            WareHouseID = .Parameters("@WareHouseID").Value
            WareHouseName = .Parameters("@WareHouseName").Value
        End With


        If IsDBNull(InvoiceTypeID) Then
            InvoiceTypeID = InvoiceType
        End If


        _BsInvoice.DataSource = _DtInvoice
        dgvInvoice.DataSource = _BsInvoice











        dgvInvoice.AutoResizeColumns(DataGridViewAutoSizeColumnsMode.DisplayedCells)
    End Sub









#End Region
#Region "       Item Invoice"

    Private Sub cboItem_MyItemSelectedByEnter(ItemID As Object) Handles cboItem.MyItemSelectedByEnter
        Try

            Dim IDstr As String = Mid(ItemID, 3)
            Dim ID As Int64 = IDstr
            ' Dim Barcoded As Object = DBNull.Value

            If (InvoiceType = InvoiceTypes.Purchase Or InvoiceType = InvoiceTypes.InitialAmount) _
                And Mid(ItemID, 1, 1) = "1" Then

                Dim F As New frm_ProductStock(frm_ProductStock.FrmType.Express, , ID)
                F.ShowDialog()
                ID = F._StockID

            End If

            Dim dt As DataTable
            If Mid(ItemID, 1, 1) = "1" Then
                dt = GetItemFromDB(ID, True, DBNull.Value, DBNull.Value)
            Else
                dt = GetItemFromDB(ID, False, DBNull.Value, DBNull.Value)
            End If




            AnalyzeEntry(dt)



        Catch ex As Exception
            HandleMyError(ex)
        End Try
    End Sub

    Private Function GetItemFromDB(ByVal ItemID As Object, ByVal IsProduct As Boolean, ByVal Barcode As Object, ByVal Org_InvoiceID As Object) As DataTable
        Dim da As New SqlDataAdapter("sp_Get_Item", PubCn)
        Dim dt As New DataTable

        With da.SelectCommand
            .CommandType = CommandType.StoredProcedure
            .Parameters.Clear()
            .Parameters.AddWithValue("@ItemID", ItemID)
            .Parameters.AddWithValue("@IsProduct", IsProduct)
            .Parameters.AddWithValue("@Barcode", Barcode)
            .Parameters.AddWithValue("@Org_InvoiceID", Org_InvoiceID)
        End With



        da.Fill(dt)



        Return dt
    End Function


    Private Sub AnalyzeEntry(ByRef dt As DataTable, Optional MyAmount As Decimal = 1)



        Me.WareHouseID = 1



        Dim Sort As Object
        Dim GID As Object
        Dim IsProduct As Object
        Dim SubAmount As Object
        Dim PacketSellPrice As Object
        Dim WareHouseID As Object
        Dim PlusOrMinus As Object
        Dim StockID As Object
        Dim StockName As Object
        Dim ProductDetails As Object
        Dim Barcode As Object
        Dim Amount As Object
        Dim UnitPrice As Object
        Dim AvgCost As Object



        Select Case InvoiceType

            Case InvoiceTypes.Sell, InvoiceTypes.Sell_R, InvoiceTypes.PreSale, InvoiceTypes.Loss

                Dim DR As DataRow
                If dt.Rows.Count = 1 Then
                    DR = dt.Rows(0)
                Else

                    Dim f As New frm_Choise(dt)
                    f.SetCol("Exdate", "الصلاحية", "yyyy-MM-dd")
                    f.SetCol("AmountLeft", "الكمية المتبقية", "#,##0.###")
                    f.dgv.Font = New Font(Me.Font.Name, 14)
                    f.dgv.AutoResizeColumns(DataGridViewAutoSizeColumnsMode.DisplayedCells)
                    f.ShowDialog()

                    DR = f._DR

                End If


                Select Case InvoiceType
                    Case InvoiceTypes.Sell, InvoiceTypes.Loss
                        PlusOrMinus = -1
                    Case InvoiceTypes.Sell_R
                        PlusOrMinus = -1
                    Case InvoiceTypes.PreSale
                        PlusOrMinus = 0
                End Select

                GID = DR.Item("GID")
                IsProduct = DR.Item("IsProduct")
                WareHouseID = Me.WareHouseID
                StockID = DR.Item("ItemID")
                SubAmount = DR.Item("SubAmount")
                PacketSellPrice = DR.Item("PacketSellPrice")
                StockName = DR.Item("ItemName")
                ProductDetails = DR.Item("ItemDetails")
                Barcode = DR.Item("Barcode")
                UnitPrice = DR.Item("SellPrice")
                AvgCost = DR.Item("AvgUnitCost")
                Amount = 1

                Dt_Invoice_Add_Item(GID, IsProduct, StockID, SubAmount, PacketSellPrice, StockName, ProductDetails, Barcode, Amount, AvgCost, PlusOrMinus, UnitPrice)


            Case InvoiceTypes.Purchase, InvoiceTypes.InitialAmount






        End Select




    End Sub

    Private Sub Dt_Invoice_Add_Item(ByVal GID As Object _
    , ByVal IsProduct As Object, ByVal StockID As Object _
    , ByVal SubAmount As Object, ByVal PacketSellPrice As Object, _
    ByVal StockName As Object, ByVal ProductDetails As Object _
    , ByVal Barcode As Object, ByVal Amount As Object, ByVal AvgCost As Object _
    , ByVal PlusOrMinus As Object, ByVal UnitPrice As Object)







        Dim DR As DataRow

        If _BsInvoice.Find("GID", GID) > 0 Then
            _BsInvoice.Position = _BsInvoice.Find("GID", GID)
            DR = DirectCast(_BsInvoice.Current, DataRowView).Row
            DR("Amount") = DR("Amount") + 1
        Else
            DR = _DtInvoice.NewRow
            DR("Sort") = _BsInvoice.Count + 1
            DR("GID") = GID
            DR("IsProduct") = IsProduct
            DR("WareHouseID") = Me.WareHouseID
            DR("PlusOrMinus") = PlusOrMinus
            DR("StockID") = StockID
            DR("SubAmount") = SubAmount
            DR("PacketSellPrice") = PacketSellPrice
            DR("StockName") = StockName
            DR("ProductDetails") = ProductDetails
            DR("Barcode") = Barcode
            DR("Amount") = Amount
            DR("UnitPrice") = UnitPrice
            DR("AvgCost") = AvgCost

            _DtInvoice.Rows.Add(DR)
        End If



        _BsInvoice.Position = _BsInvoice.Find("GID", GID)



        dgvInvoice_CellEndEdit(Me, New DataGridViewCellEventArgs(dgvInvoice.Columns("Amount").Index, dgvInvoice.CurrentRow.Index))




    End Sub




    Private Sub dgvInvoice_CellEndEdit(sender As Object, e As System.Windows.Forms.DataGridViewCellEventArgs) Handles dgvInvoice.CellEndEdit
        Try

            Dim R As DataGridViewRow = dgvInvoice.Rows(e.RowIndex)
            Dim ColumnName As String = dgvInvoice.Columns(e.ColumnIndex).Name

            If R.Cells("Amount").Value = 0 Then R.Cells("Amount").Value = 1


            If ColumnName = "Amount" Or ColumnName = "UnitPrice" Then
                R.Cells("Total").Value = R.Cells("Amount").Value * R.Cells("UnitPrice").Value
                R.Cells("Revenue").Value = R.Cells("Total").Value - R.Cells("Amount").Value * R.Cells("AvgCost").Value


                If (InvoiceType = InvoiceTypes.Sell Or InvoiceType = InvoiceTypes.PreSale) _
                   AndAlso R.Cells("Amount").Value >= R.Cells("SubAmount").Value Then

                    Dim Amount As Decimal = R.Cells("Amount").Value
                    Dim UnitPrice As Decimal = R.Cells("UnitPrice").Value
                    Dim Total As Decimal = R.Cells("Total").Value
                    Dim SubAmount As Object = R.Cells("SubAmount").Value
                    Dim PacketSellPrice As Object = R.Cells("PacketSellPrice").Value

                    UnitPrice = PacketSellPrice / SubAmount
                    Total = UnitPrice * Amount
                    Total = DecimalCeiling(Total)
                    UnitPrice = Total / Amount



                    R.Cells("UnitPrice").Value = UnitPrice
                    R.Cells("Total").Value = Total
                End If




            ElseIf ColumnName = "Total" Then
                R.Cells("UnitPrice").Value = R.Cells("Total").Value / R.Cells("Amount").Value
                R.Cells("Revenue").Value = R.Cells("Total").Value - R.Cells("Amount").Value * R.Cells("AvgCost").Value
            End If

        Catch ex As Exception
            HandleMyError(ex)
        End Try
    End Sub
    Private Function DecimalCeiling(MyNumber As Decimal) As Decimal





        Dim i As Integer = Math.Truncate(MyNumber)
        Dim d As Decimal
        If i < 1 Then
            d = MyNumber
        Else
            d = MyNumber Mod i
        End If




        If d = 0 Then
            d = 0
        ElseIf d > 0 And d <= 0.25 Then
            d = 0.25
        ElseIf d > 0.25 And d <= 0.5 Then
            d = 0.5
        ElseIf d > 0.5 And d <= 0.75 Then
            d = 0.75
        ElseIf d > 0.75 Then
            d = 1
        End If



        MyNumber = i + d



        Return MyNumber
    End Function






#End Region



    
























End Class

